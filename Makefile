# Makefile para o projeto Douglas Phone Line Creation
# Este arquivo facilita a execu√ß√£o do frontend e backend

.PHONY: help install dev build test clean docker-build docker-up docker-down logs status

# Vari√°veis
BACKEND_DIR := backend
FRONTEND_DIR := frontend
FAKE_API_DIR := fake-api-gateway
DOCKER_COMPOSE := docker compose.yml

# Comando padr√£o
help: ## Mostra esta mensagem de ajuda
	@echo "Douglas Phone Line Creation - Comandos Dispon√≠veis:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "Exemplos de uso:"
	@echo "  make install     # Instala depend√™ncias"
	@echo "  make dev         # Inicia desenvolvimento"
	@echo "  make docker-up   # Inicia com Docker"

## Comandos de Desenvolvimento
install: ## Instala depend√™ncias do frontend, backend e fake-api

	@echo "üì¶ Instalando depend√™ncias do backend..."
	cd $(BACKEND_DIR) && npm install
	@echo "üì¶ Instalando depend√™ncias do frontend..."
	cd $(FRONTEND_DIR) && npm install
	@echo "üì¶ Instalando depend√™ncias da fake-api..."
	cd $(FAKE_API_DIR) && npm install
	@echo "‚úÖ Depend√™ncias instaladas com sucesso!"

run: ## Inicia frontend e backend em modo desenvolvimento
	@echo "üöÄ Iniciando aplica√ß√£o em modo desenvolvimento..."
	@echo "Backend estar√° em: http://localhost:8080"
	@echo "Frontend estar√° em: http://localhost:3000"
	@echo "Fake API estar√° em: http://localhost:3001"
	@echo "Para parar, pressione Ctrl+C em ambos os terminais"
	@echo ""
	@make dev-backend &
	@sleep 3
	@make dev-frontend &
	@sleep 3
	@make dev-fake-gateway

dev-backend: ## Inicia apenas o backend
	@echo "üîß Iniciando backend..."
	cd $(BACKEND_DIR) && npm run dev

dev-frontend: ## Inicia apenas o frontend
	@echo "üé® Iniciando frontend..."
	cd $(FRONTEND_DIR) && npm run dev

dev-fake-gateway:
	@echo "üé® Iniciando gateway..."
	cd $(FAKE_API_DIR) && npm run start

start: ## Inicia frontend e backend em modo produ√ß√£o
	@echo "üöÄ Iniciando aplica√ß√£o em modo produ√ß√£o..."
	@make start-backend &
	@sleep 3
	@make start-frontend

start-backend: ## Inicia backend em produ√ß√£o
	@echo "üîß Iniciando backend em produ√ß√£o..."
	cd $(BACKEND_DIR) && npm start

start-frontend: ## Inicia frontend em produ√ß√£o
	@echo "üé® Construindo e iniciando frontend..."
	cd $(FRONTEND_DIR) && npm run build && npm start

## Comandos de Teste
test: ## Executa todos os testes
	@echo "üß™ Executando testes do backend..."
	cd $(BACKEND_DIR) && npm test
	@echo "üß™ Executando testes do frontend..."
	cd $(FRONTEND_DIR) && npm test --watchAll=false

test-backend: ## Executa testes do backend
	@echo "üß™ Executando testes do backend..."
	cd $(BACKEND_DIR) && npm test

test-frontend: ## Executa testes do frontend
	@echo "üß™ Executando testes do frontend..."
	cd $(FRONTEND_DIR) && npm test --watchAll=false

## Comandos de Build
build: ## Faz build do frontend e backend
	@echo "üî® Fazendo build da aplica√ß√£o..."
	@make build-frontend
	@echo "‚úÖ Build conclu√≠do!"

build-frontend: ## Faz build apenas do frontend
	@echo "üî® Fazendo build do frontend..."
	cd $(FRONTEND_DIR) && npm run build

## Comandos de Linting
lint: ## Executa linting em todo o projeto
	@echo "üîç Executando linting..."
	cd $(BACKEND_DIR) && npm run lint
	cd $(FRONTEND_DIR) && npm run lint

lint-fix: ## Corrige problemas de linting automaticamente
	@echo "üîß Corrigindo problemas de linting..."
	cd $(BACKEND_DIR) && npm run lint:fix
	cd $(FRONTEND_DIR) && npm run lint:fix

## Comandos Docker
docker-build: ## For√ßa a reconstru√ß√£o das imagens Docker sem cache
	@echo "üê≥ Construindo imagens Docker (sem cache)..."
	docker compose build --no-cache
	@echo "‚úÖ Imagens Docker reconstru√≠das!"

docker-up: ## Constr√≥i e inicia a aplica√ß√£o com Docker Compose
	@echo "üê≥ Iniciando aplica√ß√£o com Docker (construindo se necess√°rio)..."
	docker compose up
	@echo "‚úÖ Aplica√ß√£o iniciada!"
	@echo "Backend: http://localhost:8080"
	@echo "Frontend: http://localhost:3000"
	@echo "Fake API: http://localhost:3001"
	@make docker-status

docker-down: ## Para e remove containers Docker
	@echo "üê≥ Parando containers Docker..."
	docker compose down --remove-orphans
	@echo "‚úÖ Containers parados!"

docker-logs: ## Mostra logs de todos os containers
	@echo "üìã Logs de todos os containers:"
	docker compose logs -f

docker-logs-backend: ## Mostra logs apenas do backend
	docker compose logs -f backend

docker-logs-frontend: ## Mostra logs apenas do frontend
	docker compose logs -f frontend

docker-logs-fake-api: ## Mostra logs apenas da fake-api
	docker compose logs -f fake-api

docker-status: ## Mostra status dos containers
	@echo "üìä Status dos containers:"
	docker compose ps

## Comandos de Utilit√°rios
clean: ## Limpa arquivos tempor√°rios e node_modules
	@echo "üßπ Limpando arquivos tempor√°rios..."
	rm -rf $(BACKEND_DIR)/node_modules
	rm -rf $(FRONTEND_DIR)/node_modules
	rm -rf $(FAKE_API_DIR)/node_modules
	rm -rf $(FRONTEND_DIR)/.next
	@echo "‚úÖ Limpeza conclu√≠da!"

package: ## Cria um arquivo ZIP do projeto para envio
	@echo "üì¶ Preparando projeto para envio..."
	@echo "üßπ Limpando arquivos desnecess√°rios..."
	@rm -rf $(BACKEND_DIR)/node_modules
	@rm -rf $(FRONTEND_DIR)/node_modules
	@rm -rf $(FRONTEND_DIR)/.next
	@rm -rf $(FRONTEND_DIR)/.swc
	@rm -rf .git/objects/pack/*.pack 2>/dev/null || true
	@echo "üìÅ Criando arquivo ZIP..."
	@zip -r phone-system-$(shell date +%Y%m%d-%H%M).zip . \
		-x "*.git/objects/pack/*" \
		-x "*/node_modules/*" \
		-x "*/.next/*" \
		-x "*/.swc/*" \
		-x "*.DS_Store" \
		-x "*/coverage/*" \
		-x "*.log" \
		-x "*/dist/*" \
		-x "*/build/*" \
		-x "phone-system-*.zip"
	@echo "‚úÖ Projeto empacotado com sucesso!"
	@echo "üìé Arquivo criado: phone-system-$(shell date +%Y%m%d-%H%M).zip"
	@echo "üìä Tamanho do arquivo:"
	@ls -lh phone-system-*.zip | tail -1

package-clean: ## Cria um ZIP limpo apenas com arquivos essenciais
	@echo "üì¶ Criando pacote limpo para envio..."
	@echo "üßπ Removendo arquivos desnecess√°rios..."
	@rm -rf $(BACKEND_DIR)/node_modules $(FRONTEND_DIR)/node_modules $(FRONTEND_DIR)/.next
	@rm -f phone-system-*.zip
	@echo "üìÅ Criando ZIP otimizado..."
	@zip -r phone-clean-$(shell date +%Y%m%d-%H%M).zip . \
		-x "*.git/*" \
		-x "*/node_modules/*" \
		-x "*/.next/*" \
		-x "*/.swc/*" \
		-x "*.DS_Store" \
		-x "*/coverage/*" \
		-x "*.log" \
		-x "*/dist/*" \
		-x "*/build/*" \
		-x "*/tsconfig.tsbuildinfo" \
		-x "*/package-lock.json" \
		-x "*/.env.local" \
		-x "phone-*.zip"
	@echo "‚úÖ Pacote limpo criado!"
	@echo "üìé Arquivo: phone-clean-$(shell date +%Y%m%d-%H%M).zip"
	@ls -lh phone-clean-*.zip | tail -1
	@echo ""
	@echo "üìã Conte√∫do do pacote:"
	@echo "  ‚úÖ C√≥digo fonte completo"
	@echo "  ‚úÖ Documenta√ß√£o (README.md + ADRs)"
	@echo "  ‚úÖ Configura√ß√µes (package.json, Dockerfile, etc.)"
	@echo "  ‚úÖ Makefile com comandos"
	@echo "  ‚ùå node_modules (removido)"
	@echo "  ‚ùå Arquivos de build (removido)"
	@echo "  ‚ùå Logs e cache (removido)"

zip: package ## Alias para package

list-package: ## Lista arquivos no √∫ltimo ZIP criado
	@echo "üìã Conte√∫do do √∫ltimo pacote criado:"
	@ls -t phone-*.zip | head -1 | xargs unzip -l

health: ## Verifica se os servi√ßos est√£o funcionando
	@echo "üè• Verificando sa√∫de dos servi√ßos..."
	@curl -s http://localhost:8080/health > /dev/null && echo "‚úÖ Backend OK" || echo "‚ùå Backend n√£o est√° rodando"
	@curl -s http://localhost:3000 > /dev/null && echo "‚úÖ Frontend OK" || echo "‚ùå Frontend n√£o est√° rodando"

status: ## Mostra status atual dos servi√ßos
	@echo "üìä Status dos Servi√ßos:"
	@echo ""
	@echo "Backend (porta 8080):"
	@lsof -ti :8080 > /dev/null && echo "  ‚úÖ Rodando" || echo "  ‚ùå Parado"
	@echo ""
	@echo "Frontend (porta 3000):"
	@lsof -ti :3000 > /dev/null && echo "  ‚úÖ Rodando" || echo "  ‚ùå Parado"
	@echo ""

## Comandos de API
api-test: ## Testa endpoints da API
	@echo "üîß Testando API..."
	@echo "Health Check:"
	@curl -s http://localhost:8080/health | jq '.' 2>/dev/null || curl -s http://localhost:8080/health
	@echo ""
	@echo "Planos de assinatura:"
	@curl -s http://localhost:8080/api/subscription-plans | jq '.' 2>/dev/null || curl -s http://localhost:8080/api/subscription-plans

setup: install ## Alias para install (compatibilidade)

## Informa√ß√µes
info: ## Mostra informa√ß√µes do projeto
	@echo "üì± Douglas Phone Line Creation System"
	@echo "=================================="
	@echo ""
	@echo "üìÅ Estrutura do projeto:"
	@echo "  ‚Ä¢ Backend: Node.js + Express + Arquitetura Hexagonal"
	@echo "  ‚Ä¢ Frontend: Next.js + React + Tailwind CSS"
	@echo "  ‚Ä¢ Docker: Containeriza√ß√£o completa"
	@echo ""
	@echo "üåê URLs:"
	@echo "  ‚Ä¢ Backend:  http://localhost:8080"
	@echo "  ‚Ä¢ Frontend: http://localhost:3000"
	@echo "  ‚Ä¢ Health:   http://localhost:8080/health"
	@echo ""
	@echo "üìñ Documenta√ß√£o:"
	@echo "  ‚Ä¢ README.md"
	@echo "  ‚Ä¢ TECHNICAL-ANALYSIS.md"
	@echo "  ‚Ä¢ FINAL-DOCUMENTATION.md"